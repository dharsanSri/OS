//READER WRITER

#include<semaphore.h>
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<pthread.h>
sem_t x,y;
pthread_t tid;
pthread_t writerthreads[100],readerthreads[100];
int readercount = 0;

void *reader(void* param) 
{
    sem_wait(&x);
    readercount++;
    if(readercount==1)
        sem_wait(&y);
    sem_post(&x);
    printf("%d reader is inside\n",readercount);
    usleep(3);
    sem_wait(&x);
    readercount--;
    if(readercount==0)
    {
        sem_post(&y);
    }
    sem_post(&x);
    printf("%d Reader is leaving\n",readercount+1);
    return NULL;
}

void *writer(void* param)
{
    printf("Writer is trying to enter\n");
    sem_wait(&y);
    printf("Writer has entered\n");
    sem_post(&y);
    printf("Writer is leaving\n");
    return NULL;
}

int main()
{
    int n2,i;
    printf("Enter the number of readers:");
    scanf("%d",&n2);
    printf("\n");
    int n1[n2];
    sem_init(&x,0,1);
    sem_init(&y,0,1);
    for(i=0;i<n2;i++)
    {
        pthread_create(&writerthreads[i],NULL,reader,NULL);
        pthread_create(&readerthreads[i],NULL,writer,NULL);
    }
    for(i=0;i<n2;i++)
    {
        pthread_join(writerthreads[i],NULL);
        pthread_join(readerthreads[i],NULL);
    }

}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//producer consumer
#include<stdio.h>
#include<semaphore.h>
#include<pthread.h>
#include<stdlib.h>

#define buffersize 10
pthread_mutex_t mutex;
pthread_t tidP[20],tidC[20];

sem_t full,empty;

int counter;
int buffer[buffersize];

void initialize()
{
        pthread_mutex_init(&mutex,NULL);
        sem_init(&full,1,0);
        sem_init(&empty,1,buffersize);
        counter=0;
}

void write(int item)
{
        buffer[counter++]=item;
}

int read()
{
        return(buffer[--counter]);
}

void * producer (void * param)
{
        int waittime,item,i;
   while(1) {
        
        item=rand()%5;
        waittime=rand()%5;
        sleep(waittime);
        sem_wait(&empty);
        pthread_mutex_lock(&mutex);
        printf("\nProducer has produced item: %d\n",item);
        write(item);
        pthread_mutex_unlock(&mutex);
        sem_post(&full);
  }
}

void * consumer (void * param)
{
        int waittime,item;
  while(1) {
        waittime=rand()%5;
      
        sem_wait(&full);
        pthread_mutex_lock(&mutex);
        item=read();
        printf("\nConsumer has consumed item: %d\n",item);
        pthread_mutex_unlock(&mutex);
        sem_post(&empty);
   }
}

int main()
{
        int n1,n2,i;
        initialize();
        printf("\nEnter the no of producers: ");
        scanf("%d",&n1);
        printf("\nEnter the no of consumers: ");
        scanf("%d",&n2);
        for(i=0;i<n1;i++)
                pthread_create(&tidP[i],NULL,producer,NULL);
        for(i=0;i<n2;i++)
                pthread_create(&tidC[i],NULL,consumer,NULL);
        for(i=0;i<n1;i++)
                pthread_join(tidP[i],NULL);
        for(i=0;i<n2;i++)
                pthread_join(tidC[i],NULL);

        //sleep(5);
        exit(0);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
dining philosopher

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

pthread_mutex_t chopsticks[NUM_PHILOSOPHERS];

void *philosopher(void *arg) {
    int id = *((int *) arg);
    int left = id;
    int right = (id + 1) % NUM_PHILOSOPHERS;

    while (1) {
        // Try to pick up left chopstick
        pthread_mutex_lock(&chopsticks[left]);
        printf("Philosopher %d picks up left chopstick %d\n", id, left);

        // Try to pick up right chopstick
        pthread_mutex_lock(&chopsticks[right]);
        printf("Philosopher %d picks up right chopstick %d\n", id, right);

        // Eat
        printf("Philosopher %d is eating\n", id);
        usleep(1000000); // Simulate eating time

        // Release chopsticks
        pthread_mutex_unlock(&chopsticks[right]);
        printf("Philosopher %d puts down right chopstick %d\n", id, right);
        pthread_mutex_unlock(&chopsticks[left]);
        printf("Philosopher %d puts down left chopstick %d\n", id, left);

        // Think
        printf("Philosopher %d is thinking\n", id);
        usleep(1000000); // Simulate thinking time
    }
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];

    // Initialize mutexes
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        pthread_mutex_init(&chopsticks[i], NULL);
    }

    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    // Join threads
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy mutexes
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        pthread_mutex_destroy(&chopsticks[i]);
    }

    return 0;
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
format for shell script
#!/bin/bash

display_memory_info() {
        total_memory_gb=$(free | awk 'NR==2 {print $2/1024/1024}')
        used_memory_mb=$(free | awk 'NR==2 {print $3/1024}')
        available_memory_gb=$(free -h | awk 'NR==2 {gsub("Gi", "", $7); print $7}')
        echo "Total Memory: $total_memory_gb GB"
        echo "Used Memory: $used_memory_mb MB"
        echo "Available Memory: $available_memory_gb GB"

}

display_disk_info() {
        df -h | awk '$1 == "drivers" {print "Filesystem:", $1, "Size:", $2, "Used:", $3, "Avail:", $4, "Use%:", $5}'
}
cpu_processes() {
    echo "Top CPU-Intensive Processes:"
    top -b -n 1 | head -n 15
}
network_info() {
    echo "Network Activity:"
    nload
}
cache_memory() {
        CACHE_MEMORY_KB=$(free -m | awk 'NR==2{print $6}')
        AVAILABLE_CACHE_MEMORY_KB=$(free -m | awk 'NR==2{print $7}')

        echo "Cache Memory used: ${CACHE_MEMORY_KB} MB"
        echo "Available Cache Memory: ${AVAILABLE_CACHE_MEMORY_KB} MB"
}
while true; do
    echo "Menu:"
    echo "1. Display Memory Information"
    echo "2. Display Disk Information"
    echo "3. Display network activity:"
    echo "4. Display CPU Processes:"
    echo "5. Display cache memory:"
    echo "6. Exit"
    read -p "Enter your choice (1/2/3/4/5/6): " choice

    case "$choice" in
        1) display_memory_info ;;
        2) display_disk_info ;;
        3) network_info ;;
        4) cpu_processes ;;
        5) cache_memory ;;
        6) echo "Exiting. Goodbye!" && exit ;;
        *) echo "Invalid choice. Please select 1, 2, or 3." ;;
    esac
done
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Restaurent
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<semaphore.h>

#define MAX 6
#define N 3

sem_t entering_diner,enter_done,exiting_diner,exit_done;
sem_t mutex_enter,mutex_exit;
int count_enter = 0;
int count_exit = 0;
int c = 0;

void* diner_thread(void* args)
{

        sem_wait(&entering_diner);      /* Waits for the Front Door to open*/
        printf("Entering Diners \n");
        sem_wait(&mutex_enter);
        count_enter++;
        c++;
        printf("Count Enter : %d\n",count_enter);
        if(count_enter != N)
                sem_post(&entering_diner);
        else
                sem_post(&enter_done);
        sem_post(&mutex_enter);

        sem_wait(&exiting_diner);
        printf("\nEat\n");
        sem_post(&exiting_diner);

        sem_wait(&mutex_exit);
        //printf("Count : %d %d\n",count_exit,count_exit==N);
        count_exit++;
        if((count_exit) == N)
                sem_post(&exit_done);
        sem_post(&mutex_exit);
}

void* restaurant_thread(void* args){

        while(1){

                printf("Front Door Opened!\n");
                sem_post(&entering_diner);
                if (c==MAX){
                        printf("Front Door Closed\n");
                        /*sem_post(&enter_done);
                        sem_post(&exiting_diner);
                        sem_post(&exit_done);
                        */break;
                }
                sem_wait(&enter_done);
                printf("Front Door Closed\n");



                printf("Serving Food\n");
                printf("Back Door Opened!\n");
                sem_post(&exiting_diner);

                sem_wait(&exit_done);
                sem_wait(&exiting_diner);
                sem_wait(&mutex_exit);
                printf("Count Exit : %d\n",count_enter);
                sem_post(&mutex_exit);
                printf("\nBack Door Closed!\n");

                sem_wait(&mutex_exit);
                count_exit = 0;
                printf("Setting Count_Exit to %d\n",count_exit);
                sem_post(&mutex_exit);

                sem_wait(&mutex_enter);
                count_enter = 0;
                printf("Setting Count_Enter to %d\n",count_exit);
                sem_post(&mutex_enter);
        }
}


int main(){

        sem_init(&entering_diner,0,0);
        sem_init(&enter_done,0,0);
        sem_init(&exiting_diner,0,0);
        sem_init(&exit_done,0,0);

        sem_init(&mutex_enter,0,1);
        sem_init(&mutex_exit,0,1);

        pthread_t diners[MAX];
        pthread_t restaurant;

        for(int i=0;i<MAX;i++)
                pthread_create(&diners[i],NULL,diner_thread,NULL);

        pthread_create(&restaurant,NULL,restaurant_thread,NULL);

        for(int i=0;i<MAX;i++)
                pthread_join(diners[i],NULL);
        pthread_join(restaurant,NULL);

}
